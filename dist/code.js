(()=>{"use strict";var r=function(r,n,e,o){return new(e||(e=Promise))((function(t,a){function i(r){try{c(o.next(r))}catch(r){a(r)}}function s(r){try{c(o.throw(r))}catch(r){a(r)}}function c(r){var n;r.done?t(r.value):(n=r.value,n instanceof e?n:new e((function(r){r(n)}))).then(i,s)}c((o=o.apply(r,n||[])).next())}))};function n(n){return r(this,void 0,void 0,(function*(){if(console.log("Attempting to load fonts for node:",null==n?void 0:n.name),!n)throw new Error("Cannot load fonts: Text node is null");try{if(n.fontName===figma.mixed){console.log("Loading mixed fonts for node:",n.name);const e=n.getRangeAllFontNames(0,n.characters.length);if(!e||0===e.length)throw new Error("No fonts found in text node");yield Promise.all(e.map((n=>r(this,void 0,void 0,(function*(){if(!n)throw new Error("Invalid font object encountered");try{console.log("Loading font:",n.family),yield figma.loadFontAsync(n)}catch(r){throw new Error(`Failed to load font "${n.family}": ${r instanceof Error?r.message:"Unknown error"}`)}})))))}else{const r=n.fontName;if(!r)throw new Error("Font name is undefined");try{console.log("Loading single font:",r.family),yield figma.loadFontAsync(r)}catch(n){throw new Error(`Failed to load font "${r.family}": ${n instanceof Error?n.message:"Unknown error"}`)}}}catch(r){throw console.error("Error loading fonts:",r),new Error(`Failed to load fonts: ${r instanceof Error?r.message:"Unknown error"}`)}}))}console.log("Initializing Figma plugin..."),figma.showUI(__html__,{width:450,height:600,themeColors:!0}),figma.ui.onmessage=e=>r(void 0,void 0,void 0,(function*(){var o;if(console.log("Received message from UI:",e),e){if("parse-content"===e.type)try{if(!e.content||!e.parentTags)throw new Error("Missing required content or parent tags");const t=function(r,n){if(console.log("Parsing content..."),!r)throw new Error("Content is null or empty");if(!n||!Array.isArray(n)||0===n.length)throw new Error("Parent tags array is invalid or empty");try{!function(r,n){if(console.log("Validating tags..."),!r)throw new Error("Content is null or empty");if(!n||!Array.isArray(n)||0===n.length)throw new Error("Parent tags array is invalid or empty");for(const e of n){if(!e||"string"!=typeof e)throw new Error("Invalid parent tag encountered");const n=`{{${e}}}`,o=`{{/${e}}}`,t=(r.match(new RegExp(n,"g"))||[]).length,a=(r.match(new RegExp(o,"g"))||[]).length;if(t!==a)throw new Error(`Mismatched tags for "${e}": found ${t} opening tags and ${a} closing tags`);if(0===t)throw new Error(`Tag "${e}" not found in content`)}const e=r.match(/{{(\/?[^{}]+)}}/g);if(e)for(const r of e)if(!r||!/^{{\/?[\w\s-]+}}$/.test(r))throw new Error(`Invalid characters in tag: "${r}". Tags should only contain letters, numbers, and hyphens.`);const o=[],t=/{{(\/?[\w-]+)}}/g;let a;for(;null!==(a=t.exec(r));){if(!a||!a[0]||!a[1])throw new Error("Invalid tag structure detected");const r=a[0].includes("/"),n=a[1].replace("/","");if(r){if(0===o.length)throw new Error(`Unexpected closing tag {{/${n}}}`);const r=o.pop();if(r!==n)throw new Error(`Mismatched tags: expected {{/${r}}}, found {{/${n}}}`)}else o.push(n)}if(o.length>0)throw new Error(`Unclosed tags: ${o.join(", ")}`);console.log("Tag validation completed successfully")}(r,n);const e={parentTags:[]};if(n.forEach((n=>{if(!n)throw new Error("Invalid parent tag encountered");const o=new RegExp(`{{${n}}}([\\s\\S]*?){{/${n}}}`,"g"),t=Array.from(r.matchAll(o));if(0!==t.length)for(const r of t){if(!r||!r[1])throw new Error(`Invalid content structure in parent tag "${n}"`);const o=[],t=r[1],a=/{{(\w+)}}([\s\S]*?){{\/\1}}/g,i=Array.from(t.matchAll(a));for(const r of i){if(!r||!r[1]||!r[2])throw new Error(`Invalid child tag structure in parent "${n}"`);const e=r[2].trim();e?o.push({tag:r[1],content:e}):figma.ui.postMessage({type:"error",error:`Empty content found in tag "${r[1]}" within parent "${n}"`})}if(0===o.length)return void figma.ui.postMessage({type:"error",error:`No valid child tags found in parent tag "${n}". Check for proper formatting and non-empty content.`});e.parentTags.push({name:n,children:o})}else figma.ui.postMessage({type:"error",error:`No content found for parent tag "${n}". Make sure the tag exists and is properly formatted.`})})),!e.parentTags||0===e.parentTags.length)throw new Error("No valid content was parsed");return console.log("Content parsed successfully:",e),e}catch(r){throw console.error("Error parsing content:",r),new Error(`Failed to parse content: ${r instanceof Error?r.message:"Unknown error"}`)}}(e.content,e.parentTags);if(!((null===(o=null==t?void 0:t.parentTags)||void 0===o?void 0:o.length)>0))throw new Error("No valid content was parsed");yield function(e){return r(this,void 0,void 0,(function*(){var r;if(console.log("Starting content population..."),!e)throw new Error("Parsed content is null");if(!e.parentTags||!Array.isArray(e.parentTags))throw new Error("Invalid parent tags structure in parsed content");try{for(const o of e.parentTags){if(!o||!o.name)throw new Error("Invalid parent tag structure");console.log("Processing parent tag:",o.name);const e=null===(r=figma.currentPage)||void 0===r?void 0:r.findOne((r=>"FRAME"===(null==r?void 0:r.type)&&(null==r?void 0:r.name)===o.name));if(e){if(!o.children||!Array.isArray(o.children))throw new Error(`Invalid children structure in parent "${o.name}"`);for(const r of o.children){if(!r||!r.tag||!r.content)throw new Error(`Invalid child tag structure in parent "${o.name}"`);console.log("Processing child tag:",r.tag);const t=e.findOne((n=>"TEXT"===(null==n?void 0:n.type)&&(null==n?void 0:n.name)===r.tag));if(t)try{yield n(t),t.characters=r.content,console.log("Successfully updated text for:",r.tag)}catch(n){figma.ui.postMessage({type:"error",error:`Error updating text in "${o.name}/${r.tag}": ${n instanceof Error?n.message:"Unknown error"}`})}else figma.ui.postMessage({type:"error",error:`Text layer "${r.tag}" not found in frame "${o.name}". Check if the text layer exists and its name matches exactly.`})}}else figma.ui.postMessage({type:"error",error:`Parent frame "${o.name}" not found. Please check if the frame exists and its name matches exactly.`})}}catch(r){throw console.error("Error populating content:",r),new Error(`Failed to populate content: ${r instanceof Error?r.message:"Unknown error"}`)}}))}(t),figma.ui.postMessage({type:"process-complete"})}catch(r){figma.ui.postMessage({type:"error",error:r instanceof Error?r.message:"An unknown error occurred"})}}else figma.ui.postMessage({type:"error",error:"Invalid message received"})}))})();